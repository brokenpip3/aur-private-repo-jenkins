pipeline {
  triggers {
        cron('H 03 */2 * *')
    }
  agent {
    kubernetes {
      yaml """
kind: Pod
metadata:
  name: needsleep-update
spec:
  containers:
  - name: jnlp
    workingDir: /tmp/jenkins
    resources:
      limits:
        memory: 550Mi
        cpu: 500m
      requests:
        memory: 550Mi
        cpu: 200m
  - name: aurbuild
    workingDir: /tmp/jenkins
    image: quay.io/brokenpip3/basearch:latest
    imagePullPolicy: Always
    envFrom:
    - secretRef:
        name: jenkins-aur-repo
    args:
    - /usr/bin/cat
    tty: true
    resources:
      limits:
        memory: 550Mi
        cpu: 500m
        ephemeral-storage: 800Mi
      requests:
        memory: 550Mi
        cpu: 200m
        ephemeral-storage: 300Mi
    volumeMounts:
      - name: repo-pvc
        mountPath: /srv/repo
  volumes:
  - name: repo-pvc
    persistentVolumeClaim:
      claimName: jenkins-aur-packages
"""
    }
  }


parameters {
        string(name: 'DEBUG', defaultValue: '', description: '')}

stages {
    stage('Check dep') {
      steps {
          container('aurbuild') {
            sh './check-dep-and-trigger/check_dep.sh*'
            archiveArtifacts artifacts: "${env.WORKSPACE}/check-dep-and-trigger/pkg-depend-list"
          }
      }
      }
    stage('Build packages') {
            when {
                expression {
                    return params.DEBUG != 'yes';
                }
              }
    steps {
        container('aurbuild') {
        echo 'Updating or add new packages to repo'
        script {
                def packages = [:]
                env.WORKSPACE = pwd()
                def file = readFile "${env.WORKSPACE}/check-dep-and-trigger/pkg-depend-list"
                def lines = file.readLines()
                lines.each {
                    packages["package ${it}"] = {
                        build job: 'aur-package-build', parameters: [[$class: 'StringParameterValue', name: 'PACKAGENAME', value: "$it"]], wait: false
                    }
               }
                parallel packages
            }
        }
    }
    }
}

post {
         always {
            cleanWs()
              }
    }
}
