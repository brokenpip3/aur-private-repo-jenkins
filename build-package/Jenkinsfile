pipeline {
    agent {
        kubernetes {
            yaml """
kind: Pod
metadata:
  name: aurbuild
spec:
  containers:
  - name: aurbuild
    workingDir: /tmp/jenkins
    image: quay.io/brokenpip3/basearch:latest
    imagePullPolicy: Always
    envFrom:
    - secretRef:
        name: jenkins-aur-repo
    args:
      - "sh"
      - "-c"
      - 'touch /tmp/build.log && tail -f /tmp/build.log'
    tty: true
    resources:
      limits:
        memory: 2Gi
        cpu: 1500m
        ephemeral-storage: 10Gi
      requests:
        memory: 1Gi
        cpu: 500m
        ephemeral-storage: 10Gi
    volumeMounts:
      - name: repo-pvc
        mountPath: /srv/repo
  volumes:
  - name: repo-pvc
    persistentVolumeClaim:
      claimName: jenkins-aur-packages
"""
        }}
    options { disableConcurrentBuilds()
    timeout(time: 15, unit: 'MINUTES')
    }
    parameters {
        string(name: 'PACKAGENAME', defaultValue: 'trizen', description: 'Aur package to build')
        booleanParam(name: 'FORCE_REBUILD', defaultValue: false, description: 'Force re-build the package')
    }

    stages {
        stage("setname") {
            steps {
                buildName "aur-job-${params.PACKAGENAME} #${BUILD_NUMBER}"
                buildDescription "${BUILD_NUMBER}"
            }
        }
        stage('pacman update') {
            steps {
                container('aurbuild') {
                    sh 'sudo pacman -Sy'
                }
            }
        }
        stage('gpg keys') {
            steps {
                container('aurbuild') {
                    sh './build-package/gpgkeys.sh'
                }
            }
        }
        stage('check if the package is already present with that version') {
            when { expression { env.FORCE_REBUILD != "true" } }
            steps {
                script {
                    container('aurbuild') {
                        final def lastver = sh(script: "aur query -t info ${params.PACKAGENAME} | jq -r '.results[] | .Version'",
                        returnStdout: true).trim()
                        println lastver
                        final def localver = sh(script: "pacman -Si ${params.PACKAGENAME} | grep Version|cut -d ':' -f 2-",
                        returnStdout: true).trim()
                        println "locaver: " + localver + ", lastver: " + lastver
                        if( lastver == localver ) {
                            env.RUN_BUILD = "true"
                        } else {
                            env.RUN_BUILD = "false"
                        }
                    }
                }
            }
        }
        stage("download") {
            when {
                expression { env.RUN_BUILD == 'false'}
            }
            steps {
                container('aurbuild') {
                    sh "curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/${params.PACKAGENAME}.tar.gz"
                    sh "tar -xvf ${params.PACKAGENAME}.tar.gz"
                }
            }
        }
        stage('install dep') {
            when {
                expression { env.RUN_BUILD == 'false'}
            }
            steps {
                container('aurbuild')
                {
                    sh "cd ${params.PACKAGENAME} && makepkg -s -o --noconfirm"
                }
            }
        }
        stage('build') {
            when {
                expression { env.RUN_BUILD == 'false'}
            }
            steps {
                container('aurbuild')
                {
                    sh "cd ${params.PACKAGENAME} && makepkg -scf --noconfirm"
                }
            }
        }
        stage('update repo') {
            when {
                expression { env.RUN_BUILD == 'false'}
            }
            steps {
                container('aurbuild')
                {
                    sh "repo-add -R -p /srv/repo/needrelax.db.tar.zst /srv/repo/${params.PACKAGENAME}-*"
                }
            }
        }
    }
    // Since we are using emptydir avoid to fill the underlying compute node fs
    post {
        always {
            cleanWs()
        }
    }
}
